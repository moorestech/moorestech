<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.Diagnostics.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder">
            <summary>
            Represents a type used to configure the metrics system by registering IMetricsListeners and using rules
            to determine which metrics are enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder.Services">
            <summary>
            The application <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>. This is used by extension methods to register services.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener">
            <summary>
            Represents a type used to listen to metrics emitted from the system.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.Name">
            <summary>
            The name of the listener. This is used to identify the listener in the rules configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.Initialize(Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource)">
            <summary>
            Called once by the runtime to provide a <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource"/> used to pull for fresh metrics data.
            </summary>
            <param name="source">A <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource"/> that can be called to request current metrics.</param>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.InstrumentPublished(System.Diagnostics.Metrics.Instrument,System.Object@)">
            <summary>
            Called when a new instrument is created and enabled by a matching rule.
            </summary>
            <param name="instrument">The new <see cref="T:System.Diagnostics.Metrics.Instrument"/>.</param>
            <param name="userState">Listener state associated with this instrument. This will be returned to <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/>
            and <see cref="M:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.MeasurementsCompleted(System.Diagnostics.Metrics.Instrument,System.Object)"/>.</param>
            <returns>Returns true if the listener wants to subscribe to this instrument, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.MeasurementsCompleted(System.Diagnostics.Metrics.Instrument,System.Object)">
            <summary>
            Called when a instrument is disabled by the producer or a rules change.
            </summary>
            <param name="instrument">The <see cref="T:System.Diagnostics.Metrics.Instrument"/> being disabled.</param>
            <param name="userState">The original listener state returned by <see cref="M:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.InstrumentPublished(System.Diagnostics.Metrics.Instrument,System.Object@)"/>.</param>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.GetMeasurementHandlers">
            <summary>
            Called once to get the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers"/> that will be used to process measurements.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule">
            <summary>
            A set of parameters used to determine which instruments are enabled for which listeners. Unspecified
            parameters match anything.
            </summary>
            <remarks>
            The most specific rule that matches a given instrument will be used. The priority of parameters is as follows:
            - MeterName, either an exact match, or the longest prefix match. See <see cref="P:System.Diagnostics.Metrics.Meter.Name"/>.
            - InstrumentName, an exact match. <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>.
            - ListenerName, an exact match. <see cref="P:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.Name"/>.
            - Scopes
            </remarks>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix.</param>
            <param name="instrumentName">The <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>.</param>
            <param name="listenerName">The <see cref="P:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.Name"/>.</param>
            <param name="scopes">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeterScope"/>'s to consider.</param>
            <param name="enable">Enables or disabled the matched instrument for this listener.</param>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule.#ctor(System.String,System.String,System.String,Microsoft.Extensions.Diagnostics.Metrics.MeterScope,System.Boolean)">
            <summary>
            A set of parameters used to determine which instruments are enabled for which listeners. Unspecified
            parameters match anything.
            </summary>
            <remarks>
            The most specific rule that matches a given instrument will be used. The priority of parameters is as follows:
            - MeterName, either an exact match, or the longest prefix match. See <see cref="P:System.Diagnostics.Metrics.Meter.Name"/>.
            - InstrumentName, an exact match. <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>.
            - ListenerName, an exact match. <see cref="P:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.Name"/>.
            - Scopes
            </remarks>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix.</param>
            <param name="instrumentName">The <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>.</param>
            <param name="listenerName">The <see cref="P:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.Name"/>.</param>
            <param name="scopes">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeterScope"/>'s to consider.</param>
            <param name="enable">Enables or disabled the matched instrument for this listener.</param>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule.MeterName">
            <summary>
            The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/>, either an exact match or the longest prefix match. Only full segment matches are considered.
            All meters are matched if this is null.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule.InstrumentName">
            <summary>
            The <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>, an exact match.
            All instruments for the given meter are matched if this is null.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule.ListenerName">
            <summary>
            The <see cref="P:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.Name"/>, an exact match.
            All listeners are matched if this is null.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule.Scopes">
            <summary>
            The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeterScope"/>. This is used to distinguish between meters created via <see cref="T:System.Diagnostics.Metrics.Meter"/> constructors (<see cref="F:Microsoft.Extensions.Diagnostics.Metrics.MeterScope.Global"/>)
            and those created via Dependency Injection with <see cref="M:System.Diagnostics.Metrics.IMeterFactory.Create(System.Diagnostics.Metrics.MeterOptions)"/> (<see cref="F:Microsoft.Extensions.Diagnostics.Metrics.MeterScope.Local"/>)."/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule.Enable">
            <summary>
            Indicates if the instrument should be enabled for the listener.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource">
            <summary>
            An interface registered with each IMetricsListener using <see cref="M:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener.Initialize(Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource)"/>. The listener
            can call <see cref="M:Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource.RecordObservableInstruments"/> to receive the current set of measurements for enabled observable instruments.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource.RecordObservableInstruments">
            <summary>
            Requests that the current set of metrics for enabled instruments be sent to the listener's <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/>'s.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers">
            <summary>
            A set of supported measurement types. If a listener does not support a given type, the measurement will be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers.ByteHandler">
            <summary>
            A <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/> for <see cref="T:System.Byte"/>. If null, byte measurements will be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers.ShortHandler">
            <summary>
            A <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/> for <see cref="T:System.Int16"/>. If null, short measurements will be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers.IntHandler">
            <summary>
            A <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/> for <see cref="T:System.Int32"/>. If null, int measurements will be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers.LongHandler">
            <summary>
            A <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/> for <see cref="T:System.Int64"/>. If null, long measurements will be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers.FloatHandler">
            <summary>
            A <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/> for <see cref="T:System.Single"/>. If null, float measurements will be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers.DoubleHandler">
            <summary>
            A <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/> for <see cref="T:System.Double"/>. If null, double measurements will be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers.DecimalHandler">
            <summary>
            A <see cref="T:System.Diagnostics.Metrics.MeasurementCallback`1"/> for <see cref="T:System.Decimal"/>. If null, decimal measurements will be skipped.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Diagnostics.Metrics.MeterScope">
            <summary>
            This is used by <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule"/> to distinguish between meters created via <see cref="T:System.Diagnostics.Metrics.Meter"/> constructors (<see cref="F:Microsoft.Extensions.Diagnostics.Metrics.MeterScope.Global"/>)
            and those created via Dependency Injection with <see cref="M:System.Diagnostics.Metrics.IMeterFactory.Create(System.Diagnostics.Metrics.MeterOptions)"/> (<see cref="F:Microsoft.Extensions.Diagnostics.Metrics.MeterScope.Local"/>)."/>.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Diagnostics.Metrics.MeterScope.None">
            <summary>
            No scope is specified. This should not be used.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Diagnostics.Metrics.MeterScope.Global">
            <summary>
            Indicates <see cref="T:System.Diagnostics.Metrics.Meter"/> instances created via <see cref="T:System.Diagnostics.Metrics.Meter"/> constructors.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Diagnostics.Metrics.MeterScope.Local">
            <summary>
            Indicates <see cref="T:System.Diagnostics.Metrics.Meter"/> instances created via Dependency Injection with <see cref="M:System.Diagnostics.Metrics.IMeterFactory.Create(System.Diagnostics.Metrics.MeterOptions)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> to add or clear <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/> registrations, and to enable or disable metrics.
            </summary>
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> to add or clear <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/> registrations, and to enable or disable metrics.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.AddListener``1(Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder)">
            <summary>
            Registers a new <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/> of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The implementation type of the listener.</typeparam>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/>.</param>
            <returns>Returns the original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.AddListener(Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder,Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener)">
            <summary>
            Registers a new <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/> instance.
            </summary>
            <param name="listener">The implementation type of the listener.</param>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/>.</param>
            <returns>Returns the original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.ClearListeners(Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder)">
            <summary>
            Removes all <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/> registrations from the dependency injection container.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/>.</param>
            <returns>Returns the original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.EnableMetrics(Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder,System.String)">
            <summary>
            Enables all <see cref="T:System.Diagnostics.Metrics.Instrument"/>'s for the given meter, for all registered <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>'s.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/>.</param>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix. A null value matches all meters.</param>
            <returns>The original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.EnableMetrics(Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder,System.String,System.String,System.String,Microsoft.Extensions.Diagnostics.Metrics.MeterScope)">
            <summary>
            Enables a specified <see cref="T:System.Diagnostics.Metrics.Instrument"/> for the given <see cref="T:System.Diagnostics.Metrics.Meter"/> and <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/>.</param>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix. A null value matches all meters.</param>
            <param name="instrumentName">The <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>. A null value matches all instruments.</param>
            <param name="listenerName">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>.Name. A null value matches all listeners.</param>
            <param name="scopes">Indicates which <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeterScope"/>'s to consider. Default to all scopes.</param>
            <returns>The original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.EnableMetrics(Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions,System.String)">
            <summary>
            Enables all <see cref="T:System.Diagnostics.Metrics.Instrument"/>'s for the given meter, for all registered <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>'s.
            </summary>
            <param name="options">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions"/>.</param>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix. A null value matches all meters.</param>
            <returns>The original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.EnableMetrics(Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions,System.String,System.String,System.String,Microsoft.Extensions.Diagnostics.Metrics.MeterScope)">
            <summary>
            Enables a specified <see cref="T:System.Diagnostics.Metrics.Instrument"/> for the given <see cref="T:System.Diagnostics.Metrics.Meter"/> and <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>.
            </summary>
            <param name="options">The <see cref="T:System.Diagnostics.Metrics.MeterOptions"/>.</param>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix. A null value matches all meters.</param>
            <param name="instrumentName">The <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>. A null value matches all instruments.</param>
            <param name="listenerName">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>.Name. A null value matches all listeners.</param>
            <param name="scopes">Indicates which <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeterScope"/>'s to consider. Default to all scopes.</param>
            <returns>The original <see cref="T:System.Diagnostics.Metrics.MeterOptions"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.DisableMetrics(Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder,System.String)">
            <summary>
            Disables all <see cref="T:System.Diagnostics.Metrics.Instrument"/>'s for the given meter, for all registered <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>'s.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/>.</param>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix. A null value matches all meters.</param>
            <returns>The original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.DisableMetrics(Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder,System.String,System.String,System.String,Microsoft.Extensions.Diagnostics.Metrics.MeterScope)">
            <summary>
            Disables a specified <see cref="T:System.Diagnostics.Metrics.Instrument"/> for the given <see cref="T:System.Diagnostics.Metrics.Meter"/> and <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/>.</param>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix. A null value matches all meters.</param>
            <param name="instrumentName">The <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>. A null value matches all instruments.</param>
            <param name="listenerName">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>.Name. A null value matches all listeners.</param>
            <param name="scopes">Indicates which <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeterScope"/>'s to consider. Default to all scopes.</param>
            <returns>The original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.DisableMetrics(Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions,System.String)">
            <summary>
            Disables all <see cref="T:System.Diagnostics.Metrics.Instrument"/>'s for the given meter, for all registered <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>'s.
            </summary>
            <param name="options">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions"/>.</param>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix. A null value matches all meters.</param>
            <returns>The original <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions.DisableMetrics(Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions,System.String,System.String,System.String,Microsoft.Extensions.Diagnostics.Metrics.MeterScope)">
            <summary>
            Disables a specified <see cref="T:System.Diagnostics.Metrics.Instrument"/> for the given <see cref="T:System.Diagnostics.Metrics.Meter"/> and <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>.
            </summary>
            <param name="options">The <see cref="T:System.Diagnostics.Metrics.MeterOptions"/>.</param>
            <param name="meterName">The <see cref="P:System.Diagnostics.Metrics.Meter.Name"/> or prefix. A null value matches all meters.</param>
            <param name="instrumentName">The <see cref="P:System.Diagnostics.Metrics.Instrument.Name"/>. A null value matches all instruments.</param>
            <param name="listenerName">The <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener"/>.Name. A null value matches all listeners.</param>
            <param name="scopes">Indicates which <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.MeterScope"/>'s to consider. Default to all scopes.</param>
            <returns>The original <see cref="T:System.Diagnostics.Metrics.MeterOptions"/> for chaining.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions">
            <summary>
            Options for configuring the metrics system.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions.Rules">
            <summary>
            A list of <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule"/>'s that identify which metrics, instruments, and listeners are enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Internal.TypeNameHelper.GetTypeDisplayName(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Pretty print a type name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="fullName"><c>true</c> to print a fully qualified name.</param>
            <param name="includeGenericParameterNames"><c>true</c> to include generic parameter names.</param>
            <param name="includeGenericParameters"><c>true</c> to include generic parameters.</param>
            <param name="nestedTypeDelimiter">Character to use as a delimiter in nested type names</param>
            <returns>The pretty printed type name.</returns>
        </member>
        <member name="M:System.ThrowHelper.ThrowIfNull(System.Object,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.</summary>
            <param name="argument">The reference type argument to validate as non-null.</param>
            <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        </member>
        <member name="M:System.ThrowHelper.IfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws either an <see cref="T:System.ArgumentNullException"/> or an <see cref="T:System.ArgumentException"/>
            if the specified string is <see langword="null"/> or whitespace respectively.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or whitespace.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="T:System.Runtime.InteropServices.LibraryImportAttribute">
            <summary>
            Attribute used to indicate a source generator should create a function for marshalling
            arguments instead of relying on the runtime to generate an equivalent marshalling function at run-time.
            </summary>
            <remarks>
            This attribute is meaningless if the source generator associated with it is not enabled.
            The current built-in source generator only supports C# and only supplies an implementation when
            applied to static, partial, non-generic methods.
            </remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.LibraryImportAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.LibraryImportAttribute"/>.
            </summary>
            <param name="libraryName">Name of the library containing the import.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.LibraryName">
            <summary>
            Gets the name of the library containing the import.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.EntryPoint">
            <summary>
            Gets or sets the name of the entry point to be called.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling">
            <summary>
            Gets or sets how to marshal string arguments to the method.
            </summary>
            <remarks>
            If this field is set to a value other than <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />,
            <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType" /> must not be specified.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> used to control how string arguments to the method are marshalled.
            </summary>
            <remarks>
            If this field is specified, <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling" /> must not be specified
            or must be set to <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.SetLastError">
            <summary>
            Gets or sets whether the callee sets an error (SetLastError on Windows or errno
            on other platforms) before returning from the attributed method.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.StringMarshalling">
            <summary>
            Specifies how strings should be marshalled for generated p/invokes
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Custom">
            <summary>
            Indicates the user is suppling a specific marshaller in <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf8">
            <summary>
            Use the platform-provided UTF-8 marshaller.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf16">
            <summary>
            Use the platform-provided UTF-16 marshaller.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
