name: Run Unity Test
on:
  # masterへのPRマージをトリガーとしてワークフローを開始する
  pull_request:
    branches:
      - master
    types: [closed]

  # 手動実行デバッグ用
  workflow_dispatch: {}
  
jobs:
  test:
    name: Run Unity Test
    # mooresmasterを入れてからちゃんと動かなくなった。
    # なんかdll参照とLinuxの相性が悪いのか、linuxだとうまく動かなかった。windowsだとうまくいったので、とりあえずこれでなんとかする。
    # https://qiita.com/CdecPGL/items/a8c1c1be0fc30de9b2dd
    runs-on: windows-latest
    steps:
      # 使用するGithub Tokenを動的に生成する
      # 利用は ${{ steps.generate_token.outputs.token }}
      - name: Generate github token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      # リポジトリとサブモジュールをチェックアウト
      - name: Check out my unity project.
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # GameCI の Test runner を利用して
      # EditMode 及び PlayMode のテストを実行する
      - name: Run Unity Test
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: moorestech_server/
          githubToken: ${{ steps.generate_token.outputs.token }}
          unityVersion: 6000.1.6f1
          testMode: editmode

      # 追加: Python をセットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 追加: 失敗テストを解析して標準出力 & GitHub repository_dispatch を発行
      - name: Report failed Unity tests via repository_dispatch (Python)
        if: always()
        shell: pwsh
        env:
          # 優先トークン: 生成した App トークン。未設定なら GITHUB_TOKEN が自動で入っているためスクリプト側でフォールバック
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          # 任意: event_type を変えたい場合だけ上書き
          DISPATCH_EVENT_TYPE: unity-tests-failed
        run: |
          python .github/workflows/report_unity_failures.py --artifacts-path artifacts --limit 50 --webhook-url "$env:WEBHOOK_URL"

      # テストの実行結果をアーティファクトにアップロードしてダウンロードして参照できるようにする
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results
          path: artifacts
