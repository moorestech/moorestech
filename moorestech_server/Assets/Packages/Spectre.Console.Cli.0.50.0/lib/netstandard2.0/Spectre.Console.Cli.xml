<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spectre.Console.Cli</name>
    </assembly>
    <members>
        <member name="T:Spectre.Console.Cli.CommandArgumentAttribute">
            <summary>
            An attribute representing a command argument.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Spectre.Console.Cli.CommandArgumentAttribute.Position">
            <summary>
            Gets the argument position.
            </summary>
            <value>The argument position.</value>
        </member>
        <member name="P:Spectre.Console.Cli.CommandArgumentAttribute.ValueName">
            <summary>
            Gets the value name of the argument.
            </summary>
            <value>The value name of the argument.</value>
        </member>
        <member name="P:Spectre.Console.Cli.CommandArgumentAttribute.IsRequired">
            <summary>
            Gets a value indicating whether the argument is required.
            </summary>
            <value>
              <c>true</c> if the argument is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spectre.Console.Cli.CommandArgumentAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.CommandArgumentAttribute"/> class.
            </summary>
            <param name="position">The argument position.</param>
            <param name="template">The argument template. Wrap in &lt;&gt; for required arguments, [] for optional ones. For example "[MyArgument]".</param>
        </member>
        <member name="T:Spectre.Console.Cli.CommandOptionAttribute">
            <summary>
            An attribute representing a command option.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Spectre.Console.Cli.CommandOptionAttribute.LongNames">
            <summary>
            Gets the long names of the option.
            </summary>
            <value>The option's long names.</value>
        </member>
        <member name="P:Spectre.Console.Cli.CommandOptionAttribute.ShortNames">
            <summary>
            Gets the short names of the option.
            </summary>
            <value>The option's short names.</value>
        </member>
        <member name="P:Spectre.Console.Cli.CommandOptionAttribute.ValueName">
            <summary>
            Gets the value name of the option.
            </summary>
            <value>The option's value name.</value>
        </member>
        <member name="P:Spectre.Console.Cli.CommandOptionAttribute.ValueIsOptional">
            <summary>
            Gets a value indicating whether the value is optional.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.CommandOptionAttribute.IsHidden">
            <summary>
            Gets or sets a value indicating whether this option is hidden from the help text.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.CommandOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.CommandOptionAttribute"/> class.
            </summary>
            <param name="template">The option template.</param>
        </member>
        <member name="T:Spectre.Console.Cli.PairDeconstructorAttribute">
            <summary>
            Specifies what type to use as a pair deconstructor for
            the property this attribute is bound to.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.PairDeconstructorAttribute.Type">
            <summary>
            Gets the <see cref="T:System.String"/> that represents the type of the
            pair deconstructor class to use for data conversion for the
            object this attribute is bound to.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.PairDeconstructorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.PairDeconstructorAttribute"/> class.
            </summary>
            <param name="type">
                A System.Type that represents the type of the pair deconstructor
                class to use for data conversion for the object this attribute is bound to.
            </param>
        </member>
        <member name="T:Spectre.Console.Cli.ParameterValidationAttribute">
            <summary>
            A base class attribute used for parameter validation.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Spectre.Console.Cli.ParameterValidationAttribute.ErrorMessage">
            <summary>
            Gets the validation error message.
            </summary>
            <value>The validation error message.</value>
        </member>
        <member name="M:Spectre.Console.Cli.ParameterValidationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.ParameterValidationAttribute"/> class.
            </summary>
            <param name="errorMessage">The validation error message.</param>
        </member>
        <member name="M:Spectre.Console.Cli.ParameterValidationAttribute.Validate(Spectre.Console.Cli.CommandParameterContext)">
            <summary>
            Validates the parameter value.
            </summary>
            <param name="context">The parameter context.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.ParameterValueProviderAttribute">
            <summary>
            A base class attribute used for parameter completion.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Spectre.Console.Cli.ParameterValueProviderAttribute.TryGetValue(Spectre.Console.Cli.CommandParameterContext,System.Object@)">
            <summary>
            Gets a value for the parameter.
            </summary>
            <param name="context">The parameter context.</param>
            <param name="result">The resulting value.</param>
            <returns><c>true</c> if a value was provided; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.AsyncCommand">
            <summary>
            Base class for an asynchronous command with no settings.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand.ExecuteAsync(Spectre.Console.Cli.CommandContext)">
            <summary>
            Executes the command.
            </summary>
            <param name="context">The command context.</param>
            <returns>An integer indicating whether or not the command executed successfully.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand.Spectre#Console#Cli#ICommand{Spectre#Console#Cli#EmptyCommandSettings}#Execute(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.EmptyCommandSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand.Spectre#Console#Cli#ICommand#Execute(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand.Spectre#Console#Cli#ICommand#Validate(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <inheritdoc/>
        </member>
        <member name="T:Spectre.Console.Cli.AsyncCommand`1">
            <summary>
            Base class for an asynchronous command.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand`1.Validate(Spectre.Console.Cli.CommandContext,`0)">
            <summary>
            Validates the specified settings and remaining arguments.
            </summary>
            <param name="context">The command context.</param>
            <param name="settings">The settings.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand`1.ExecuteAsync(Spectre.Console.Cli.CommandContext,`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="context">The command context.</param>
            <param name="settings">The settings.</param>
            <returns>An integer indicating whether or not the command executed successfully.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand`1.Spectre#Console#Cli#ICommand#Validate(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand`1.Spectre#Console#Cli#ICommand#Execute(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.AsyncCommand`1.Spectre#Console#Cli#ICommand{TSettings}#Execute(Spectre.Console.Cli.CommandContext,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Spectre.Console.Cli.CaseSensitivity">
            <summary>
            Represents case sensitivity.
            </summary>
        </member>
        <member name="F:Spectre.Console.Cli.CaseSensitivity.None">
            <summary>
            Nothing is case sensitive.
            </summary>
        </member>
        <member name="F:Spectre.Console.Cli.CaseSensitivity.LongOptions">
            <summary>
            Long options are case sensitive.
            </summary>
        </member>
        <member name="F:Spectre.Console.Cli.CaseSensitivity.Commands">
            <summary>
            Commands are case sensitive.
            </summary>
        </member>
        <member name="F:Spectre.Console.Cli.CaseSensitivity.All">
            <summary>
            Everything is case sensitive.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Command">
            <summary>
            Base class for a command without settings.
            </summary>
            <seealso cref="T:Spectre.Console.Cli.AsyncCommand"/>
        </member>
        <member name="M:Spectre.Console.Cli.Command.Execute(Spectre.Console.Cli.CommandContext)">
            <summary>
            Executes the command.
            </summary>
            <param name="context">The command context.</param>
            <returns>An integer indicating whether or not the command executed successfully.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Command.Spectre#Console#Cli#ICommand{Spectre#Console#Cli#EmptyCommandSettings}#Execute(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.EmptyCommandSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.Command.Spectre#Console#Cli#ICommand#Execute(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.Command.Spectre#Console#Cli#ICommand#Validate(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <inheritdoc/>
        </member>
        <member name="T:Spectre.Console.Cli.CommandApp">
            <summary>
            The entry point for a command line application.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp.#ctor(Spectre.Console.Cli.ITypeRegistrar)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.CommandApp"/> class.
            </summary>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp.Configure(System.Action{Spectre.Console.Cli.IConfigurator})">
            <summary>
            Configures the command line application.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp.SetDefaultCommand``1">
            <summary>
            Sets the default command.
            </summary>
            <typeparam name="TCommand">The command type.</typeparam>
            <returns>A <see cref="T:Spectre.Console.Cli.Internal.Configuration.DefaultCommandConfigurator"/> that can be used to configure the default command.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp.Run(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs the command line application with specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The exit code from the executed command.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp.RunAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs the command line application with specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The exit code from the executed command.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.CommandAppException">
            <summary>
            Represents errors that occur during application execution.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.CommandAppException.Pretty">
            <summary>
            Gets the pretty formatted exception message.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.CommandApp`1">
            <summary>
            The entry point for a command line application with a default command.
            </summary>
            <typeparam name="TDefaultCommand">The type of the default command.</typeparam>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp`1.#ctor(Spectre.Console.Cli.ITypeRegistrar)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.CommandApp`1"/> class.
            </summary>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp`1.Configure(System.Action{Spectre.Console.Cli.IConfigurator})">
            <summary>
            Configures the command line application.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp`1.Run(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs the command line application with specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The exit code from the executed command.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp`1.RunAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs the command line application with specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The exit code from the executed command.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp`1.WithDescription(System.String)">
            <summary>
            Sets the description of the default command.
            </summary>
            <param name="description">The default command description.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.CommandApp`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.CommandApp`1.WithData(System.Object)">
            <summary>
            Sets data that will be passed to the command via the <see cref="T:Spectre.Console.Cli.CommandContext"/>.
            </summary>
            <param name="data">The data to pass to the default command.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.CommandApp`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.CommandConfigurationException">
            <summary>
            Represents errors that occur during configuration.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.CommandContext">
            <summary>
            Represents a command context.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.CommandContext.Remaining">
            <summary>
            Gets the remaining arguments.
            </summary>
            <value>
            The remaining arguments.
            </value>
        </member>
        <member name="P:Spectre.Console.Cli.CommandContext.Arguments">
            <summary>
            Gets all the arguments that were passed to the application.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.CommandContext.Name">
            <summary>
            Gets the name of the command.
            </summary>
            <value>
            The name of the command.
            </value>
        </member>
        <member name="P:Spectre.Console.Cli.CommandContext.Data">
            <summary>
            Gets the data that was passed to the command during registration (if any).
            </summary>
            <value>
            The command data.
            </value>
        </member>
        <member name="M:Spectre.Console.Cli.CommandContext.#ctor(System.Collections.Generic.IEnumerable{System.String},Spectre.Console.Cli.IRemainingArguments,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.CommandContext"/> class.
            </summary>
            <param name="arguments">All arguments that were passed to the application.</param>
            <param name="remaining">The remaining arguments.</param>
            <param name="name">The command name.</param>
            <param name="data">The command data.</param>
        </member>
        <member name="T:Spectre.Console.Cli.Command`1">
            <summary>
            Base class for a command.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
            <seealso cref="T:Spectre.Console.Cli.AsyncCommand`1"/>
        </member>
        <member name="M:Spectre.Console.Cli.Command`1.Validate(Spectre.Console.Cli.CommandContext,`0)">
            <summary>
            Validates the specified settings and remaining arguments.
            </summary>
            <param name="context">The command context.</param>
            <param name="settings">The settings.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Command`1.Execute(Spectre.Console.Cli.CommandContext,`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="context">The command context.</param>
            <param name="settings">The settings.</param>
            <returns>An integer indicating whether or not the command executed successfully.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Command`1.Spectre#Console#Cli#ICommand#Validate(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.Command`1.Spectre#Console#Cli#ICommand#Execute(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.Command`1.Spectre#Console#Cli#ICommand{TSettings}#Execute(Spectre.Console.Cli.CommandContext,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Spectre.Console.Cli.CommandParameterContext">
            <summary>
            Represents a context for <see cref="T:Spectre.Console.Cli.ICommandParameterInfo"/> related operations.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.CommandParameterContext.Parameter">
            <summary>
            Gets the parameter.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.CommandParameterContext.Resolver">
            <summary>
            Gets the type resolver.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.CommandParameterContext.Value">
            <summary>
            Gets tje parameter value.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.CommandParameterContext.#ctor(Spectre.Console.Cli.ICommandParameterInfo,Spectre.Console.Cli.ITypeResolver,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.CommandParameterContext"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="resolver">The type resolver.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="T:Spectre.Console.Cli.CommandParseException">
            <summary>
            Represents errors that occur during parsing.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.CommandRuntimeException">
            <summary>
            Represents errors that occur during runtime.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.CommandSettings">
            <summary>
            Base class for command settings.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.CommandSettings.Validate">
            <summary>
            Performs validation of the settings.
            </summary>
            <returns>The validation result.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.CommandTemplateException">
            <summary>
            Represents errors related to parameter templates.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.CommandTemplateException.Template">
            <summary>
            Gets the template that contains the error.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.ConfiguratorExtensions">
            <summary>
            Contains extensions for <see cref="T:Spectre.Console.Cli.IConfigurator"/>
            and <see cref="T:Spectre.Console.Cli.IConfigurator`1"/>.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.SetHelpProvider(Spectre.Console.Cli.IConfigurator,Spectre.Console.Cli.Help.IHelpProvider)">
            <summary>
            Sets the help provider for the application.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="helpProvider">The help provider to use.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.SetHelpProvider``1(Spectre.Console.Cli.IConfigurator)">
            <summary>
            Sets the help provider for the application.
            </summary>
            <param name="configurator">The configurator.</param>
            <typeparam name="T">The type of the help provider to instantiate at runtime and use.</typeparam>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.SetApplicationCulture(Spectre.Console.Cli.IConfigurator,System.Globalization.CultureInfo)">
            <summary>
            Sets the culture for the application.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="culture">The culture.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
            <remarks>
            Text displayed by <see cref="T:Spectre.Console.Cli.Help.HelpProvider"/> can be localised, but defaults to English.
            Setting the application culture informs the resource manager which culture to use when fetching strings.
            English will be used when a culture has not been specified
            or a string has not been localised for the specified culture.
            </remarks>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.SetApplicationName(Spectre.Console.Cli.IConfigurator,System.String)">
            <summary>
            Sets the name of the application.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="name">The name of the application.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.SetApplicationVersion(Spectre.Console.Cli.IConfigurator,System.String)">
            <summary>
            Sets the version of the application.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="version">The version of application.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.UseAssemblyInformationalVersion(Spectre.Console.Cli.IConfigurator)">
            <summary>
            Uses the version retrieved from the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>
            as the application's version.
            </summary>
            <param name="configurator">The configurator.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.HideOptionDefaultValues(Spectre.Console.Cli.IConfigurator)">
            <summary>
            Hides the <c>DEFAULT</c> column that lists default values coming from the
            <see cref="T:System.ComponentModel.DefaultValueAttribute"/> in the options help text.
            </summary>
            <param name="configurator">The configurator.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.ConfigureConsole(Spectre.Console.Cli.IConfigurator,Spectre.Console.IAnsiConsole)">
            <summary>
            Configures the console.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="console">The console.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.UseStrictParsing(Spectre.Console.Cli.IConfigurator)">
            <summary>
            Sets the parsing mode to strict.
            </summary>
            <param name="configurator">The configurator.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.TrimTrailingPeriods(Spectre.Console.Cli.IConfigurator,System.Boolean)">
            <summary>
            Tells the help provider whether or not to trim trailing period.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="trimTrailingPeriods">True to trim trailing period (default), false to not.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.PropagateExceptions(Spectre.Console.Cli.IConfigurator)">
            <summary>
            Tells the command line application to propagate all
            exceptions to the user.
            </summary>
            <param name="configurator">The configurator.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.CaseSensitivity(Spectre.Console.Cli.IConfigurator,Spectre.Console.Cli.CaseSensitivity)">
            <summary>
            Configures case sensitivity.
            </summary>
            <param name="configurator">The configuration.</param>
            <param name="sensitivity">The case sensitivity.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.ValidateExamples(Spectre.Console.Cli.IConfigurator)">
            <summary>
            Tells the command line application to validate all
            examples before running the application.
            </summary>
            <param name="configurator">The configurator.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.SetInterceptor(Spectre.Console.Cli.IConfigurator,Spectre.Console.Cli.ICommandInterceptor)">
            <summary>
            Sets the command interceptor to be used.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="interceptor">A <see cref="T:Spectre.Console.Cli.ICommandInterceptor"/>.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.AddBranch(Spectre.Console.Cli.IConfigurator,System.String,System.Action{Spectre.Console.Cli.IConfigurator{Spectre.Console.Cli.CommandSettings}})">
            <summary>
            Adds a command branch.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="name">The name of the command branch.</param>
            <param name="action">The command branch configuration.</param>
            <returns>A branch configurator that can be used to configure the branch further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.AddBranch``1(Spectre.Console.Cli.IConfigurator{``0},System.String,System.Action{Spectre.Console.Cli.IConfigurator{``0}})">
            <summary>
            Adds a command branch.
            </summary>
            <typeparam name="TSettings">The command setting type.</typeparam>
            <param name="configurator">The configurator.</param>
            <param name="name">The name of the command branch.</param>
            <param name="action">The command branch configuration.</param>
            <returns>A branch configurator that can be used to configure the branch further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.AddDelegate(Spectre.Console.Cli.IConfigurator,System.String,System.Func{Spectre.Console.Cli.CommandContext,System.Int32})">
            <summary>
            Adds a command without settings that executes a delegate.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="name">The name of the command.</param>
            <param name="func">The delegate to execute as part of command execution.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.AddAsyncDelegate(Spectre.Console.Cli.IConfigurator,System.String,System.Func{Spectre.Console.Cli.CommandContext,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Adds a command without settings that executes an async delegate.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="name">The name of the command.</param>
            <param name="func">The delegate to execute as part of command execution.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.AddDelegate``1(Spectre.Console.Cli.IConfigurator{``0},System.String,System.Func{Spectre.Console.Cli.CommandContext,System.Int32})">
            <summary>
            Adds a command without settings that executes a delegate.
            </summary>
            <typeparam name="TSettings">The command setting type.</typeparam>
            <param name="configurator">The configurator.</param>
            <param name="name">The name of the command.</param>
            <param name="func">The delegate to execute as part of command execution.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.AddAsyncDelegate``1(Spectre.Console.Cli.IConfigurator{``0},System.String,System.Func{Spectre.Console.Cli.CommandContext,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Adds a command without settings that executes an async delegate.
            </summary>
            <typeparam name="TSettings">The command setting type.</typeparam>
            <param name="configurator">The configurator.</param>
            <param name="name">The name of the command.</param>
            <param name="func">The delegate to execute as part of command execution.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.SetExceptionHandler(Spectre.Console.Cli.IConfigurator,System.Action{System.Exception,Spectre.Console.Cli.ITypeResolver})">
            <summary>
            Sets the ExceptionsHandler.
            <para>Setting <see cref="P:Spectre.Console.Cli.ICommandAppSettings.ExceptionHandler"/> this way will use the
            default exit code of -1.</para>
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="exceptionHandler">The Action that handles the exception.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ConfiguratorExtensions.SetExceptionHandler(Spectre.Console.Cli.IConfigurator,System.Func{System.Exception,Spectre.Console.Cli.ITypeResolver,System.Int32})">
            <summary>
            Sets the ExceptionsHandler.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="exceptionHandler">The Action that handles the exception.</param>
            <returns>A configurator that can be used to configure the application further.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.EmptyCommandSettings">
            <summary>
            Represents empty settings.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.FlagValue`1">
            <summary>
            Implementation of a flag with an optional value.
            </summary>
            <typeparam name="T">The flag's element type.</typeparam>
        </member>
        <member name="P:Spectre.Console.Cli.FlagValue`1.IsSet">
            <summary>
            Gets or sets a value indicating whether or not the flag was set or not.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.FlagValue`1.Value">
            <summary>
            Gets or sets the flag's value.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.FlagValue`1.Spectre#Console#Cli#IFlagValue#Type">
            <inheritdoc/>
        </member>
        <member name="P:Spectre.Console.Cli.FlagValue`1.Spectre#Console#Cli#IFlagValue#Value">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.FlagValue`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Spectre.Console.Cli.Help.HelpProvider">
            <summary>
            The help provider for Spectre.Console.
            </summary>
            <remarks>
            Other IHelpProvider implementations can be injected into the CommandApp, if desired.
            </remarks>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProvider.MaximumIndirectExamples">
            <summary>
            Gets a value indicating how many examples from direct children to show in the help text.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProvider.ShowOptionDefaultValues">
            <summary>
            Gets a value indicating whether any default values for command options are shown in the help text.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProvider.TrimTrailingPeriod">
            <summary>
            Gets a value indicating whether a trailing period of a description is trimmed in the help text.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProvider.RenderMarkupInline">
            <summary>
            Gets a value indicating whether to emit the markup styles, inline, when rendering the help text.
            </summary>
            <remarks>
            Useful for unit testing different styling of the same help text.
            </remarks>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.#ctor(Spectre.Console.Cli.ICommandAppSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Spectre.Console.Cli.Help.HelpProvider"/> class.
            </summary>
            <param name="settings">The command line application settings used for configuration.</param>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.Write(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.GetHeader(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Gets the header for the help information.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.GetDescription(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Gets the description section of the help information.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.GetUsage(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Gets the usage section of the help information.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.GetExamples(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Gets the examples section of the help information.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects.</returns>
            <remarks>
            Examples from the command's direct children are used
            if no examples have been set on the specified command or model.
            </remarks>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.GetArguments(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Gets the arguments section of the help information.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.GetOptions(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Gets the options section of the help information.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.GetCommands(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Gets the commands section of the help information.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Help.HelpProvider.GetFooter(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Gets the footer for the help information.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.Help.HelpProviderResources">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.Arguments">
            <summary>
            Gets the localised string for ARGUMENTS.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.Command">
            <summary>
            Gets the localised string for COMMAND.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.Commands">
            <summary>
            Gets the localised string for COMMANDS.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.Default">
            <summary>
            Gets the localised string for DEFAULT.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.Description">
            <summary>
            Gets the localised string for DESCRIPTION.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.Examples">
            <summary>
            Gets the localised string for EXAMPLES.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.Options">
            <summary>
            Gets the localised string for OPTIONS.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.PrintHelpDescription">
            <summary>
            Gets the localised string for Prints help information.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.PrintVersionDescription">
            <summary>
            Gets the localised string for Prints version information.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderResources.Usage">
            <summary>
            Gets the localised string for USAGE.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.HelpProviderStyle">
            <summary>
            Styles for the HelpProvider to use when rendering help text.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderStyle.Description">
            <summary>
            Gets or sets the style for describing the purpose or details of a command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderStyle.Usage">
            <summary>
            Gets or sets the style for specifying the usage format of a command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderStyle.Examples">
            <summary>
            Gets or sets the style for providing examples of command usage.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderStyle.Arguments">
            <summary>
            Gets or sets the style for specifying arguments in a command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderStyle.Options">
            <summary>
            Gets or sets the style for specifying options or flags in a command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderStyle.Commands">
            <summary>
            Gets or sets the style for specifying subcommands or nested commands.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.HelpProviderStyle.Default">
            <summary>
            Gets the default HelpProvider styles.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.DescriptionStyle">
            <summary>
            Defines styles for describing the purpose or details of a command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.DescriptionStyle.Header">
            <summary>
            Gets or sets the style for the header in the description.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.UsageStyle">
            <summary>
            Defines styles for specifying the usage format of a command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.UsageStyle.Header">
            <summary>
            Gets or sets the style for the header in the usage.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.UsageStyle.CurrentCommand">
            <summary>
            Gets or sets the style for the current command in the usage.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.UsageStyle.Command">
            <summary>
            Gets or sets the style for general commands in the usage.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.UsageStyle.Options">
            <summary>
            Gets or sets the style for options in the usage.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.UsageStyle.RequiredArgument">
            <summary>
            Gets or sets the style for required arguments in the usage.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.UsageStyle.OptionalArgument">
            <summary>
            Gets or sets the style for optional arguments in the usage.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.ExampleStyle">
            <summary>
            Defines styles for providing examples of command usage.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ExampleStyle.Header">
            <summary>
            Gets or sets the style for the header in the examples.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ExampleStyle.Arguments">
            <summary>
            Gets or sets the style for arguments in the examples.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.ArgumentStyle">
            <summary>
            Defines styles for specifying arguments in a command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ArgumentStyle.Header">
            <summary>
            Gets or sets the style for the header in the arguments.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ArgumentStyle.RequiredArgument">
            <summary>
            Gets or sets the style for required arguments.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ArgumentStyle.OptionalArgument">
            <summary>
            Gets or sets the style for optional arguments.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.CommandStyle">
            <summary>
            Defines styles for specifying subcommands or nested commands.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.CommandStyle.Header">
            <summary>
            Gets or sets the style for the header in the command section.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.CommandStyle.ChildCommand">
            <summary>
            Gets or sets the style for child commands in the command section.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.CommandStyle.RequiredArgument">
            <summary>
            Gets or sets the style for required arguments in the command section.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.OptionStyle">
            <summary>
            Defines styles for specifying options or flags in a command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.OptionStyle.Header">
            <summary>
            Gets or sets the style for the header in the options.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.OptionStyle.DefaultValueHeader">
            <summary>
            Gets or sets the style for the header of default values in the options.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.OptionStyle.DefaultValue">
            <summary>
            Gets or sets the style for default values in the options.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.OptionStyle.RequiredOption">
            <summary>
            Gets or sets the style for required options.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.OptionStyle.OptionalOption">
            <summary>
            Gets or sets the style for optional options.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.ICommandArgument">
            <summary>
            Represents a command argument.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandArgument.Value">
            <summary>
            Gets the value of the argument.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandArgument.Position">
            <summary>
            Gets the position of the argument.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.ICommandContainer">
            <summary>
            Represents a command container.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandContainer.Examples">
            <summary>
            Gets all the examples for the container.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandContainer.Commands">
            <summary>
            Gets all commands in the container.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandContainer.DefaultCommand">
            <summary>
            Gets the default command for the container.
            </summary>
            <remarks>
            Returns null if a default command has not been set.
            </remarks>
        </member>
        <member name="T:Spectre.Console.Cli.Help.ICommandInfo">
            <summary>
            Represents an executable command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandInfo.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandInfo.Description">
            <summary>
            Gets the description of the command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandInfo.IsBranch">
            <summary>
            Gets a value indicating whether the command is a branch.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandInfo.IsDefaultCommand">
            <summary>
            Gets a value indicating whether the command is the default command within its container.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandInfo.IsHidden">
            <summary>
            Gets a value indicating whether the command is hidden.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandInfo.Parameters">
            <summary>
            Gets the parameters associated with the command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandInfo.Parent">
            <summary>
            Gets the parent command, if any.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.Help.ICommandInfoExtensions.Flatten(Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Walks up the command.Parent tree, adding each command into a list as it goes.
            </summary>
            <remarks>The first command added to the list is the current (ie. this one).</remarks>
            <returns>The list of commands from current to root, as traversed by <see cref="P:Spectre.Console.Cli.CommandInfo.Parent"/>.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.Help.ICommandModel">
            <summary>
            Represents a command model.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandModel.ApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandModel.ApplicationVersion">
            <summary>
            Gets the version of the application.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.ICommandOption">
            <summary>
            Represents a command option.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandOption.LongNames">
            <summary>
            Gets the long names of the option.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandOption.ShortNames">
            <summary>
            Gets the short names of the option.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandOption.ValueName">
            <summary>
            Gets the value name of the option, if applicable.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandOption.ValueIsOptional">
            <summary>
            Gets a value indicating whether the option value is optional.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.ICommandParameter">
            <summary>
            Represents a command parameter.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandParameter.IsFlag">
            <summary>
            Gets a value indicating whether the parameter is a flag.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandParameter.Required">
            <summary>
            Gets a value indicating whether the parameter is required.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandParameter.Description">
            <summary>
            Gets the description of the parameter.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandParameter.DefaultValue">
            <summary>
            Gets the default value of the parameter, if specified.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Help.ICommandParameter.IsHidden">
            <summary>
            Gets a value indicating whether the parameter is hidden.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Help.IHelpProvider">
            <summary>
            The help provider interface for Spectre.Console.
            </summary>
            <remarks>
            Implementations of this interface are responsbile
            for writing command help to the terminal when the
            `-h` or `--help` has been specified on the command line.
            </remarks>
        </member>
        <member name="M:Spectre.Console.Cli.Help.IHelpProvider.Write(Spectre.Console.Cli.Help.ICommandModel,Spectre.Console.Cli.Help.ICommandInfo)">
            <summary>
            Writes help information for the application.
            </summary>
            <param name="model">The command model to write help for.</param>
            <param name="command">The command for which to write help information (optional).</param>
            <returns>An enumerable collection of <see cref="T:Spectre.Console.Rendering.IRenderable"/> objects representing the help information.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.IBranchConfigurator">
            <summary>
            Represents a branch configurator.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.IBranchConfigurator.WithAlias(System.String)">
            <summary>
            Adds an alias (an alternative name) to the branch being configured.
            </summary>
            <param name="name">The alias to add to the branch being configured.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.IBranchConfigurator"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.ICommand">
            <summary>
            Represents a command.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.ICommand.Validate(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <summary>
            Validates the specified settings and remaining arguments.
            </summary>
            <param name="context">The command context.</param>
            <param name="settings">The settings.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ICommand.Execute(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <summary>
            Executes the command.
            </summary>
            <param name="context">The command context.</param>
            <param name="settings">The settings.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.ICommandApp">
            <summary>
            Represents a command line application.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandApp.Configure(System.Action{Spectre.Console.Cli.IConfigurator})">
            <summary>
            Configures the command line application.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandApp.Run(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs the command line application with specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The exit code from the executed command.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandApp.RunAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs the command line application with specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The exit code from the executed command.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.ICommandAppSettings">
            <summary>
            Represents a command line application settings.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <remarks>
            Text displayed by <see cref="T:Spectre.Console.Cli.Help.HelpProvider"/> can be localised, but defaults to English.
            Setting this property informs the resource manager which culture to use when fetching strings.
            English will be used when a culture has not been specified (ie. this property is null)
            or a string has not been localised for the specified culture.
            </remarks>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.ApplicationName">
            <summary>
            Gets or sets the application name.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.ApplicationVersion">
            <summary>
            Gets or sets the application version (use it to override auto-detected value).
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.MaximumIndirectExamples">
            <summary>
            Gets or sets a value indicating how many examples from direct children to show in the help text.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.ShowOptionDefaultValues">
            <summary>
            Gets or sets a value indicating whether any default values for command options are shown in the help text.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.TrimTrailingPeriod">
            <summary>
            Gets or sets a value indicating whether a trailing period of a description is trimmed in the help text.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.HelpProviderStyles">
            <summary>
            Gets or sets the styles to used when rendering the help text.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.Console">
            <summary>
            Gets or sets the <see cref="T:Spectre.Console.IAnsiConsole"/>.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.Interceptor">
            <summary>
            Gets or sets the <see cref="T:Spectre.Console.Cli.ICommandInterceptor"/> used
            to intercept settings before it's being sent to the command.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.Registrar">
            <summary>
            Gets the type registrar.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.CaseSensitivity">
            <summary>
            Gets or sets case sensitivity.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.StrictParsing">
            <summary>
            Gets or sets a value indicating whether or not parsing is strict.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.ConvertFlagsToRemainingArguments">
            <summary>
            Gets or sets a value indicating whether or not flags found on the command line
            that would normally result in a <see cref="T:Spectre.Console.Cli.CommandParseException"/> being thrown
            during parsing with the message "Flags cannot be assigned a value."
            should instead be added to the remaining arguments collection.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.PropagateExceptions">
            <summary>
            Gets or sets a value indicating whether or not exceptions should be propagated.
            <para>Setting this to <c>true</c> will disable default Exception handling and
            any <see cref="P:Spectre.Console.Cli.ICommandAppSettings.ExceptionHandler"/>, if set.</para>
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.ValidateExamples">
            <summary>
            Gets or sets a value indicating whether or not examples should be validated.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandAppSettings.ExceptionHandler">
            <summary>
            Gets or sets a handler for Exceptions.
            <para>This handler will not be called, if <see cref="P:Spectre.Console.Cli.ICommandAppSettings.PropagateExceptions"/> is set to <c>true</c>.</para>
            The <see cref="T:Spectre.Console.Cli.ITypeResolver"/> argument will only be not-null, when the exception occurs during execution of
            a command. I.e. only when the resolver is available.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.ICommandConfigurator">
            <summary>
            Represents a command configurator.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandConfigurator.WithExample(System.String[])">
            <summary>
            Adds an example of how to use the command.
            </summary>
            <param name="args">The example arguments.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.ICommandConfigurator"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandConfigurator.WithAlias(System.String)">
            <summary>
            Adds an alias (an alternative name) to the command being configured.
            </summary>
            <param name="name">The alias to add to the command being configured.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.ICommandConfigurator"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandConfigurator.WithDescription(System.String)">
            <summary>
            Sets the description of the command.
            </summary>
            <param name="description">The command description.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.ICommandConfigurator"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandConfigurator.WithData(System.Object)">
            <summary>
            Sets data that will be passed to the command via the <see cref="T:Spectre.Console.Cli.CommandContext"/>.
            </summary>
            <param name="data">The data to pass to the command.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.ICommandConfigurator"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandConfigurator.IsHidden">
            <summary>
            Marks the command as hidden.
            Hidden commands do not show up in help documentation or
            generated XML models.
            </summary>
            <returns>The same <see cref="T:Spectre.Console.Cli.ICommandConfigurator"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.ICommandInterceptor">
            <summary>
            Represents a command settings interceptor that
            will intercept command settings before it's
            passed to a command.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandInterceptor.Intercept(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings)">
            <summary>
            Intercepts command information before it's passed to a command.
            </summary>
            <param name="context">The intercepted <see cref="T:Spectre.Console.Cli.CommandContext"/>.</param>
            <param name="settings">The intercepted <see cref="T:Spectre.Console.Cli.CommandSettings"/>.</param>
        </member>
        <member name="M:Spectre.Console.Cli.ICommandInterceptor.InterceptResult(Spectre.Console.Cli.CommandContext,Spectre.Console.Cli.CommandSettings,System.Int32@)">
            <summary>
            Intercepts a command result before it's passed as the result.
            </summary>
            <param name="context">The intercepted <see cref="T:Spectre.Console.Cli.CommandContext"/>.</param>
            <param name="settings">The intercepted <see cref="T:Spectre.Console.Cli.CommandSettings"/>.</param>
            <param name="result">The result from the command execution.</param>
        </member>
        <member name="T:Spectre.Console.Cli.ICommandLimiter`1">
            <summary>
            Represents a command limiter.
            </summary>
            <typeparam name="TSettings">The type of the settings to limit to.</typeparam>
            <seealso cref="T:Spectre.Console.Cli.ICommand" />
        </member>
        <member name="T:Spectre.Console.Cli.ICommand`1">
            <summary>
            Represents a command.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
        </member>
        <member name="M:Spectre.Console.Cli.ICommand`1.Execute(Spectre.Console.Cli.CommandContext,`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="context">The command context.</param>
            <param name="settings">The settings.</param>
            <returns>An integer indicating whether or not the command executed successfully.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.ICommandParameterInfo">
            <summary>
            Represents a command parameter.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandParameterInfo.PropertyName">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandParameterInfo.ParameterType">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandParameterInfo.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Spectre.Console.Cli.IConfigurator">
            <summary>
            Represents a configurator.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator.SetHelpProvider(Spectre.Console.Cli.Help.IHelpProvider)">
            <summary>
            Sets the help provider for the application.
            </summary>
            <param name="helpProvider">The help provider to use.</param>
            <returns>A configurator that can be used for further configuration.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator.SetHelpProvider``1">
            <summary>
            Sets the help provider for the application.
            </summary>
            <typeparam name="T">The type of the help provider to instantiate at runtime and use.</typeparam>
            <returns>A configurator that can be used for further configuration.</returns>
        </member>
        <member name="P:Spectre.Console.Cli.IConfigurator.Settings">
            <summary>
            Gets the command app settings.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator.AddExample(System.String[])">
            <summary>
            Adds an example of how to use the application.
            </summary>
            <param name="args">The example arguments.</param>
            <returns>A configurator that can be used for further configuration.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator.AddCommand``1(System.String)">
            <summary>
            Adds a command.
            </summary>
            <typeparam name="TCommand">The command type.</typeparam>
            <param name="name">The name of the command.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator.AddDelegate``1(System.String,System.Func{Spectre.Console.Cli.CommandContext,``0,System.Int32})">
            <summary>
            Adds a command that executes a delegate.
            </summary>
            <typeparam name="TSettings">The command setting type.</typeparam>
            <param name="name">The name of the command.</param>
            <param name="func">The delegate to execute as part of command execution.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator.AddAsyncDelegate``1(System.String,System.Func{Spectre.Console.Cli.CommandContext,``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Adds a command that executes an async delegate.
            </summary>
            <typeparam name="TSettings">The command setting type.</typeparam>
            <param name="name">The name of the command.</param>
            <param name="func">The delegate to execute as part of command execution.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator.AddBranch``1(System.String,System.Action{Spectre.Console.Cli.IConfigurator{``0}})">
            <summary>
            Adds a command branch.
            </summary>
            <typeparam name="TSettings">The command setting type.</typeparam>
            <param name="name">The name of the command branch.</param>
            <param name="action">The command branch configurator.</param>
            <returns>A branch configurator that can be used to configure the branch further.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.IConfigurator`1">
            <summary>
            Represents a configurator for specific settings.
            </summary>
            <typeparam name="TSettings">The command setting type.</typeparam>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator`1.SetDescription(System.String)">
            <summary>
            Sets the description of the branch.
            </summary>
            <param name="description">The description of the branch.</param>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator`1.AddExample(System.String[])">
            <summary>
            Adds an example of how to use the branch.
            </summary>
            <param name="args">The example arguments.</param>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator`1.SetDefaultCommand``1">
            <summary>
            Adds a default command.
            </summary>
            <remarks>
            This is the command that will run if the user doesn't specify one on the command line.
            It must be able to execute successfully by itself ie. without requiring any command line
            arguments, flags or option values.
            </remarks>
            <typeparam name="TDefaultCommand">The default command type.</typeparam>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator`1.HideBranch">
            <summary>
            Marks the branch as hidden.
            Hidden branches do not show up in help documentation or
            generated XML models.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator`1.AddCommand``1(System.String)">
            <summary>
            Adds a command.
            </summary>
            <typeparam name="TCommand">The command type.</typeparam>
            <param name="name">The name of the command.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator`1.AddDelegate``1(System.String,System.Func{Spectre.Console.Cli.CommandContext,``0,System.Int32})">
            <summary>
            Adds a command that executes a delegate.
            </summary>
            <typeparam name="TDerivedSettings">The derived command setting type.</typeparam>
            <param name="name">The name of the command.</param>
            <param name="func">The delegate to execute as part of command execution.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator`1.AddAsyncDelegate``1(System.String,System.Func{Spectre.Console.Cli.CommandContext,``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Adds a command that executes an async delegate.
            </summary>
            <typeparam name="TDerivedSettings">The derived command setting type.</typeparam>
            <param name="name">The name of the command.</param>
            <param name="func">The delegate to execute as part of command execution.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.IConfigurator`1.AddBranch``1(System.String,System.Action{Spectre.Console.Cli.IConfigurator{``0}})">
            <summary>
            Adds a command branch.
            </summary>
            <typeparam name="TDerivedSettings">The derived command setting type.</typeparam>
            <param name="name">The name of the command branch.</param>
            <param name="action">The command branch configuration.</param>
            <returns>A branch configurator that can be used to configure the branch further.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.IFlagValue">
            <summary>
            Represents a flag with an optional value.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IFlagValue.IsSet">
            <summary>
            Gets or sets a value indicating whether or not the flag was set or not.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IFlagValue.Type">
            <summary>
            Gets the flag's element type.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IFlagValue.Value">
            <summary>
            Gets or sets the flag's value.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.CommandValueResolver.SmartConverter">
            <summary>
            Convert inputs using the given <see cref="P:Spectre.Console.Cli.CommandValueResolver.SmartConverter.TypeConverter"/> and fallback to finding a constructor taking a single argument of the input type.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.IMultiMap">
            <summary>
            Representation of a multi map.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.IMultiMap.Add(System.ValueTuple{System.Object,System.Object})">
            <summary>
            Adds a key and a value to the multi map.
            </summary>
            <param name="pair">The pair to add.</param>
        </member>
        <member name="M:Spectre.Console.Cli.CommandExecutor.InternalParseCommandLineArguments(Spectre.Console.Cli.CommandModel,Spectre.Console.Cli.CommandAppSettings,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Parse the command line arguments using the specified <see cref="T:Spectre.Console.Cli.CommandModel"/> and <see cref="T:Spectre.Console.Cli.CommandAppSettings"/>,
            returning the parser and tokenizer results.
            </summary>
            <returns>The parser and tokenizer results as a tuple.</returns>
        </member>
        <member name="F:Spectre.Console.Cli.Composer._renderMarkup">
            <summary>
            Whether to emit the markup styles, inline, when rendering the content.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Internal.Configuration.DefaultCommandConfigurator">
            <summary>
            Fluent configurator for the default command.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.Internal.Configuration.DefaultCommandConfigurator.WithDescription(System.String)">
            <summary>
            Sets the description of the default command.
            </summary>
            <param name="description">The default command description.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.Internal.Configuration.DefaultCommandConfigurator"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Internal.Configuration.DefaultCommandConfigurator.WithData(System.Object)">
            <summary>
            Sets data that will be passed to the command via the <see cref="T:Spectre.Console.Cli.CommandContext"/>.
            </summary>
            <param name="data">The data to pass to the default command.</param>
            <returns>The same <see cref="T:Spectre.Console.Cli.Internal.Configuration.DefaultCommandConfigurator"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.IConfiguration">
            <summary>
            Represents a configuration.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IConfiguration.Commands">
            <summary>
            Gets the configured commands.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IConfiguration.Settings">
            <summary>
            Gets the settings for the configuration.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IConfiguration.DefaultCommand">
            <summary>
            Gets the default command for the configuration.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IConfiguration.Examples">
            <summary>
            Gets all examples for the configuration.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.DefaultPairDeconstructor.Spectre#Console#Cli#IPairDeconstructor#Deconstruct(Spectre.Console.Cli.ITypeResolver,System.Type,System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Spectre.Console.Cli.IPairDeconstructor">
            <summary>
            Represents a pair deconstructor.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.IPairDeconstructor.Deconstruct(Spectre.Console.Cli.ITypeResolver,System.Type,System.Type,System.String)">
            <summary>
            Deconstructs the specified value into its components.
            </summary>
            <param name="resolver">The type resolver to use.</param>
            <param name="keyType">The key type.</param>
            <param name="valueType">The value type.</param>
            <param name="value">The value to deconstruct.</param>
            <returns>A deconstructed value.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.CommandModel.GetApplicationName(System.String)">
            <summary>
            Gets the name of the application.
            If the provided <paramref name="applicationName"/> is not null or empty,
            it is returned. Otherwise the name of the current application
            is determined based on the executable file's name.
            </summary>
            <param name="applicationName">The optional name of the application.</param>
            <returns>
            The name of the application, or a default value of "?" if no valid application name can be determined.
            </returns>
        </member>
        <member name="T:Spectre.Console.Cli.ICommandContainer">
            <summary>
            Represents a command container.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandContainer.Commands">
            <summary>
            Gets all commands in the container.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.ICommandContainer.DefaultCommand">
            <summary>
            Gets the default command for the container.
            </summary>
            <remarks>
            Returns null if a default command has not been set.
            </remarks>
        </member>
        <member name="P:Spectre.Console.Cli.CommandTreeToken.HadSeparator">
            <summary>
            Gets or sets a value indicating whether a separater was encountered immediately before the <see cref="P:Spectre.Console.Cli.CommandTreeToken.Value"/>.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.IRemainingArguments">
            <summary>
            Represents the remaining arguments.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IRemainingArguments.Parsed">
            <summary>
            Gets the parsed remaining arguments.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.IRemainingArguments.Raw">
            <summary>
            Gets the raw, non-parsed remaining arguments.
            This is normally everything after the `--` delimiter.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.ITypeRegistrar">
            <summary>
            Represents a type registrar.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.ITypeRegistrar.Register(System.Type,System.Type)">
            <summary>
            Registers the specified service.
            </summary>
            <param name="service">The service.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Spectre.Console.Cli.ITypeRegistrar.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the specified instance.
            </summary>
            <param name="service">The service.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Spectre.Console.Cli.ITypeRegistrar.RegisterLazy(System.Type,System.Func{System.Object})">
            <summary>
            Registers the specified instance lazily.
            </summary>
            <param name="service">The service.</param>
            <param name="factory">The factory that creates the implementation.</param>
        </member>
        <member name="M:Spectre.Console.Cli.ITypeRegistrar.Build">
            <summary>
            Builds the type resolver representing the registrations
            specified in the current instance.
            </summary>
            <returns>A type resolver.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.ITypeRegistrarFrontend">
            <summary>
            Represents a user friendly frontend for a <see cref="T:Spectre.Console.Cli.ITypeRegistrar"/>.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.ITypeRegistrarFrontend.Register``2">
            <summary>
            Registers the type with the type registrar as a singleton.
            </summary>
            <typeparam name="TService">The exposed service type.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
        </member>
        <member name="M:Spectre.Console.Cli.ITypeRegistrarFrontend.RegisterInstance``1(``0)">
            <summary>
            Registers the specified instance with the type registrar as a singleton.
            </summary>
            <typeparam name="TImplementation">The type of the instance.</typeparam>
            <param name="instance">The instance to register.</param>
        </member>
        <member name="M:Spectre.Console.Cli.ITypeRegistrarFrontend.RegisterInstance``2(``1)">
            <summary>
            Registers the specified instance with the type registrar as a singleton.
            </summary>
            <typeparam name="TService">The exposed service type.</typeparam>
            <typeparam name="TImplementation"> implementing type.</typeparam>
            <param name="instance">The instance to register.</param>
        </member>
        <member name="T:Spectre.Console.Cli.ITypeResolver">
            <summary>
            Represents a type resolver.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.ITypeResolver.Resolve(System.Type)">
            <summary>
            Resolves an instance of the specified type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>An instance of the specified type, or <c>null</c> if no registration for the specified type exists.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.PairDeconstructor`2">
            <summary>
            Base class for a pair deconstructor.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Spectre.Console.Cli.PairDeconstructor`2.Deconstruct(System.String)">
            <summary>
            Deconstructs the provided <see cref="T:System.String"/> into a pair.
            </summary>
            <param name="value">The string to deconstruct into a pair.</param>
            <returns>The deconstructed pair.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.PairDeconstructor`2.Spectre#Console#Cli#IPairDeconstructor#Deconstruct(Spectre.Console.Cli.ITypeResolver,System.Type,System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Spectre.Console.Cli.PairDeconstuctor`2">
            <summary>
            Base class for a pair deconstructor.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <remarks>This class is misspelled, use <see cref="T:Spectre.Console.Cli.PairDeconstructor`2"/> instead.</remarks>
        </member>
        <member name="T:Spectre.Console.Cli.Resources.HelpProvider">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Arguments">
            <summary>
              Looks up a localized string similar to ARGUMENTS.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Command">
            <summary>
              Looks up a localized string similar to COMMAND.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Commands">
            <summary>
              Looks up a localized string similar to COMMANDS.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Default">
            <summary>
              Looks up a localized string similar to DEFAULT.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Description">
            <summary>
              Looks up a localized string similar to DESCRIPTION.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Examples">
            <summary>
              Looks up a localized string similar to EXAMPLES.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Options">
            <summary>
              Looks up a localized string similar to OPTIONS.
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.PrintHelpDescription">
            <summary>
              Looks up a localized string similar to Prints help information..
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.PrintVersionDescription">
            <summary>
              Looks up a localized string similar to Prints version information..
            </summary>
        </member>
        <member name="P:Spectre.Console.Cli.Resources.HelpProvider.Usage">
            <summary>
              Looks up a localized string similar to USAGE.
            </summary>
        </member>
        <member name="T:Spectre.Console.Cli.Unsafe.IUnsafeBranchConfigurator">
            <summary>
            Represents an unsafe configurator for a branch.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.Unsafe.IUnsafeBranchConfigurator.SetDescription(System.String)">
            <summary>
            Sets the description of the branch.
            </summary>
            <param name="description">The description of the branch.</param>
        </member>
        <member name="M:Spectre.Console.Cli.Unsafe.IUnsafeBranchConfigurator.AddExample(System.String[])">
            <summary>
            Adds an example of how to use the branch.
            </summary>
            <param name="args">The example arguments.</param>
        </member>
        <member name="T:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator">
            <summary>
            Represents an unsafe configurator.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator.AddCommand(System.String,System.Type)">
            <summary>
            Adds a command.
            </summary>
            <param name="name">The name of the command.</param>
            <param name="command">The command type.</param>
            <returns>A command configurator that can be used to configure the command further.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator.AddBranch(System.String,System.Type,System.Action{Spectre.Console.Cli.Unsafe.IUnsafeBranchConfigurator})">
            <summary>
            Adds a command branch.
            </summary>
            <param name="name">The name of the command branch.</param>
            <param name="settings">The command setting type.</param>
            <param name="action">The command branch configurator.</param>
            <returns>A branch configurator that can be used to configure the branch further.</returns>
        </member>
        <member name="T:Spectre.Console.Cli.Unsafe.UnsafeConfiguratorExtensions">
            <summary>
            Contains unsafe extensions for <see cref="T:Spectre.Console.Cli.IConfigurator"/>.
            </summary>
        </member>
        <member name="M:Spectre.Console.Cli.Unsafe.UnsafeConfiguratorExtensions.SafetyOff(Spectre.Console.Cli.IConfigurator)">
            <summary>
            Gets an <see cref="T:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator"/> that allows
            composition of commands without type safety.
            </summary>
            <param name="configurator">The configurator.</param>
            <returns>An <see cref="T:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator"/>.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Unsafe.UnsafeConfiguratorExtensions.SafetyOn(Spectre.Console.Cli.Unsafe.IUnsafeConfigurator)">
            <summary>
            Converts an <see cref="T:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator"/> to
            a configurator with type safety.
            </summary>
            <param name="configurator">The configurator.</param>
            <returns>An <see cref="T:Spectre.Console.Cli.IConfigurator"/>.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Unsafe.UnsafeConfiguratorExtensions.SafetyOff``1(Spectre.Console.Cli.IConfigurator{``0})">
            <summary>
            Gets an <see cref="T:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator"/> that allows
            composition of commands without type safety.
            </summary>
            <typeparam name="TSettings">The command settings.</typeparam>
            <param name="configurator">The configurator.</param>
            <returns>An <see cref="T:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator"/>.</returns>
        </member>
        <member name="M:Spectre.Console.Cli.Unsafe.UnsafeConfiguratorExtensions.SafetyOn``1(Spectre.Console.Cli.Unsafe.IUnsafeBranchConfigurator)">
            <summary>
            Converts an <see cref="T:Spectre.Console.Cli.Unsafe.IUnsafeConfigurator"/> to
            a configurator with type safety.
            </summary>
            <typeparam name="TSettings">The command settings.</typeparam>
            <param name="configurator">The configurator.</param>
            <returns>An <see cref="T:Spectre.Console.Cli.IConfigurator`1"/>.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
