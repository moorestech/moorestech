# 直近で着手するテスト関連作業 (1〜3優先)

1. **セーブデータ破壊テスト基盤の整備**
   - `Tests/Util/SaveLoadJsonTestHelper` を中心に、セーブ→JSON破壊→ロードの一連処理を一関数で呼べるようにする。
   - `CorruptJson` / `RemoveNode` / `ReplaceNode` などのヘルパーを活用し、tick更新中にランダムまたは毎フレームで破壊テストを差し込めるよう API を整理する。
   - 破損セーブ発生時の挙動を各種シナリオテストから再利用できることを確認し、今後のフェイルインジェクションテストの土台とする。

2. **ドッキング整合性テスト (②〜④) の実装**
   - `TrainUnit` 解体／削除時に駅占有状態が確実に解除されるようデストラクタ/Dispose周りを点検し、必要に応じて処理を追加する。
   - ロード時に駅-列車のドッキング状態が再構築されるか、破損JSONを含むケースでも安全に解除・再接続できるかをテストで検証する。
   - 貨物列車のインベントリ、ダイアグラム設定、`TrainUnit` 全体のセーブデータが完全に復元されることを確認する統合テストを追加する。

3. **[A] 複列車セーブ/ロード回帰テストとダイアグラム永続化改善**
   - 複数列車が走行・減速・ドッキング・待機中の状態でセーブした後にロードし、位置・速度・編成・ダイアグラム・インベントリが一致することを自動検証する。
   - 自動運転の `WaitForTicks` 条件や途中停車中のセーブでも残りティック数が復元されることをアサートする。
   - ダイアグラムセーブ処理でノード参照をID化している箇所を `RailPosition.CreateSaveSnapshot()` の設計に合わせて簡潔化し、シリアライズロジックを統一する。
